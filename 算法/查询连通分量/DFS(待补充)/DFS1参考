

import java.util.LinkedList;

//求图的连通子图
public class DFS {
  private boolean[] isVisited;
  private int[] id;//顶点i属于第几个连通分量
  private int count;//连通分量数目
   
  public DFS(Graph g){//图g
      isVisited = new boolean[g.v];
      id = new int[g.v];
       
      for(int i=0;i<g.v;i++){
          if(!isVisited[i]){//顶点i没有被访问
              dfs(g,i);
              count++;
              System.out.println();
          }
      }
  }
   
  //深度优先遍历
  private void dfs(Graph g, int u) {
      isVisited[u] = true;
      id[u] = count;
      System.out.print(u+" ");
       
      for(Element e : g.tableGrap.get(u)){
          if(!isVisited[e.v])
              dfs(g,e.v);
      }
  }

  public static void main(String[] args){
//    测试结果
//    子图1：0 2 5 
//    子图2：1 
//    子图3：3 4 
      LinkedList<Element> list = new LinkedList<>();
      list.add(new Element(0,2));
      list.add(new Element(0, 5));
      list.add(new Element(3,4));
       
      Graph graph = new Graph(6, list);
      DFS cc = new DFS(graph);
  }
}
