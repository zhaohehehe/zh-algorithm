package zhaohe.study.leetcode.source.two_sum;

import java.util.HashMap;
import java.util.Map;

public class TwoSum {
	public static void main(String[] args) {
		int[] nums = new int[] { 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12,
				2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6,
				134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678,
				80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4,
				67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45,
				67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56,
				90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35,
				76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134,
				54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80,
				132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67,
				457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67,
				89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90,
				12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76,
				9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54,
				678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132,
				45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457,
				88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89,
				34, 56, 90, 12, 2, 35, 76, 1000, 3000, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34,
				56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2,
				35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6,
				134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678,
				80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4,
				67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45,
				67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56,
				90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35,
				76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134,
				54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80,
				132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67,
				457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67,
				89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90,
				12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76,
				9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54,
				678, 80, 132, 45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132,
				45, 4, 67, 457, 88, 45, 67, 89, 34, 56, 90, 12, 2, 35, 76, 9, 6, 134, 54, 678, 80, 132, 45, 4, 67, 457,
				88, 45, 67, 89, 34, 56, 90, 12 };
		int target = 4000;
		// 方法一
		long a = System.currentTimeMillis();
		for (int i = 0; i < 1000; i++) {
			TwoSum.twoSum1(nums, target);
		}
		long b = System.currentTimeMillis();
		System.out.println("耗时： " + String.valueOf(b - a));
		// 方法二
		a = System.currentTimeMillis();
		for (int i = 0; i < 1000; i++) {
			TwoSum.twoSum2(nums, target);
		}
		b = System.currentTimeMillis();
		System.out.println("耗时： " + String.valueOf(b - a));

	}

	/**
	 * 时间复杂度：O(n*n) 空间复杂度：O(1)
	 * 
	 * @param nums
	 * @param target
	 * @return
	 */
	public static int[] twoSum1(int[] nums, int target) {
		for (int i = 0; i < nums.length; i++) {
			for (int j = i + 1; j < nums.length; j++) {
				if (nums[j] == target - nums[i]) {
					return new int[] { i, j };
				}
			}
		}
		throw new IllegalArgumentException("No two sum solution");
	}

	/**
	 * 时间复杂度：O(n) 空间复杂度：O(1)
	 * 
	 * @param nums
	 * @param target
	 * @return
	 */
	public static int[] twoSum2(int[] nums, int target) {
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < nums.length; i++) {
			int another = target - nums[i];
			if (map.containsKey(another)) {
				return new int[] { i, map.get(another) };
			}
			map.put(nums[i], i);
		}
		throw new IllegalArgumentException("No two sum solution");
	}

}
